name: Deploy to KingHost

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, zip, unzip
        coverage: none
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Composer dependencies
      run: composer install --optimize-autoloader --no-dev --no-interaction
      
    - name: Install NPM dependencies
      run: npm ci
      
    - name: Build assets
      run: npm run build
      
    - name: Create production .env file
      run: |
        cat > .env << EOF
        APP_NAME="Projeto ExpoAgro"
        APP_ENV=production
        APP_KEY=${{ secrets.APP_KEY }}
        APP_DEBUG=false
        APP_URL=${{ secrets.APP_URL }}
        
        APP_LOCALE=pt_BR
        APP_FALLBACK_LOCALE=pt_BR
        APP_FAKER_LOCALE=pt_BR
        
        LOG_CHANNEL=single
        LOG_LEVEL=error
        
        DB_CONNECTION=mysql
        DB_HOST=${{ secrets.DB_HOST }}
        DB_PORT=3306
        DB_DATABASE=${{ secrets.DB_DATABASE }}
        DB_USERNAME=${{ secrets.DB_USERNAME }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        
        SESSION_DRIVER=database
        SESSION_LIFETIME=120
        CACHE_STORE=database
        QUEUE_CONNECTION=database
        
        MAIL_MAILER=smtp
        MAIL_HOST=smtp.kinghost.net
        MAIL_PORT=587
        MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
        MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
        MAIL_ENCRYPTION=tls
        MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}
        MAIL_FROM_NAME="Projeto ExpoAgro"
        
        VITE_APP_NAME="Projeto ExpoAgro"
        EOF
      
    - name: Create deployment package
      run: |
        mkdir -p deploy
        rsync -av --exclude='node_modules' --exclude='.git' --exclude='tests' --exclude='storage/logs/*' --exclude='deploy-manual.sh' . deploy/
        
        # Create root .htaccess for Laravel
        cat > deploy/.htaccess << 'EOF'
        <IfModule mod_rewrite.c>
            RewriteEngine On
            RewriteRule ^(.*)$ public/$1 [L]
        </IfModule>
        EOF
        
        cd deploy
        tar -czf ../deploy.tar.gz .
        
    - name: Debug Secrets
      run: |
        echo "=== DEBUGGING SECRETS ==="
        echo "FTP_HOST exists: $([string]::IsNullOrEmpty($env:FTP_HOST) -eq $false)"
        echo "FTP_USERNAME exists: $([string]::IsNullOrEmpty($env:FTP_USERNAME) -eq $false)"
        echo "FTP_PASSWORD exists: $([string]::IsNullOrEmpty($env:FTP_PASSWORD) -eq $false)"
        echo "FTP_SERVER_DIR exists: $([string]::IsNullOrEmpty($env:FTP_SERVER_DIR) -eq $false)"
        if ($env:FTP_HOST) {
          echo "FTP_HOST length: $($env:FTP_HOST.Length)"
          echo "FTP_HOST preview: $($env:FTP_HOST.Substring(0, [Math]::Min(10, $env:FTP_HOST.Length)))..."
        } else {
          echo "FTP_HOST is NULL or EMPTY!"
        }
        echo "=== END DEBUG ==="
      env:
        FTP_HOST: ${{ secrets.FTP_HOST }}
        FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        FTP_SERVER_DIR: ${{ secrets.FTP_SERVER_DIR }}
      shell: pwsh
        
    - name: Deploy to KingHost via FTP (PowerShell)
      run: |
        # Instalar WinSCP se não estiver disponível
        if (!(Get-Command "WinSCP.exe" -ErrorAction SilentlyContinue)) {
          Write-Host "Installing WinSCP..."
          Invoke-WebRequest -Uri "https://winscp.net/download/WinSCP-5.21.8-Portable.zip" -OutFile "winscp.zip"
          Expand-Archive -Path "winscp.zip" -DestinationPath "winscp" -Force
          $env:PATH += ";$(Get-Location)\winscp"
        }
        
        # Criar script WinSCP
        $script = @"
option batch abort
option confirm off
open ftp://$env:FTP_USERNAME`:$env:FTP_PASSWORD@$env:FTP_HOST
cd $env:FTP_SERVER_DIR
put deploy\* .
exit
"@
        
        $script | Out-File -FilePath "upload.txt" -Encoding ASCII
        
        # Executar upload
        Write-Host "Starting FTP upload to $env:FTP_HOST..."
        & "winscp\WinSCP.com" /script=upload.txt
        
        if ($LASTEXITCODE -eq 0) {
          Write-Host "✅ Deploy completed successfully!"
        } else {
          Write-Host "❌ Deploy failed with exit code: $LASTEXITCODE"
          exit 1
        }
      env:
        FTP_HOST: ${{ secrets.FTP_HOST }}
        FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
        FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        FTP_SERVER_DIR: ${{ secrets.FTP_SERVER_DIR }}
      shell: pwsh